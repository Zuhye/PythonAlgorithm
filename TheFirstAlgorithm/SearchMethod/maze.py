maze = [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
        [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 0, 9],
        [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
        [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
        [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
        [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
        [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
        [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
        [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
        [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]

maze2 = [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
         [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
         [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 0, 9],
         [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
         [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
         [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
         [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
         [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
         [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
         [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
         [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
         [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]

maze3 = [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
         [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
         [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 0, 9],
         [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
         [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
         [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
         [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
         [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
         [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
         [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
         [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
         [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]]

# ------ bfs (너비우선 탐색)--------
# 시작 위치(x좌표, y좌표, 이동 횟수)
pos = [[1, 1, 0]]

while len(pos) > 0:
    x, y, depth = pos.pop(0)

    # 목표에 도달 하면 종료
    if maze[x][y] == 1:
        print(depth)
        break
    # 탐색 완료로 설정
    maze[x][y] = 2

    # 상하좌우 탐색
    if maze[x - 1][y] < 2:
        pos.append([x - 1, y, depth + 1])
    if maze[x][y - 1] < 2:
        pos.append([x, y - 1, depth + 1])
    if maze[x + 1][y] < 2:
        pos.append([x + 1, y, depth + 1])
    if maze[x][y + 1] < 2:
        pos.append([x, y + 1, depth + 1])


# ---- dfs (깊이 우선 탐색) -----
def search(x, y, depth):
    # 목표에 도달하면
    if maze2[x][y] == 1:
        print(depth)

    # 탐색 완료로 설정
    maze2[x][y] = 2

    # 상하좌우 탐색
    if maze2[x - 1][y] < 2:
        search(x - 1, y, depth + 1)
    if maze2[x][y - 1] < 2:
        search(x, y - 1, depth + 1)
    if maze2[x + 1][y] < 2:
        search(x + 1, y, depth + 1)
    if maze2[x][y + 1] < 2:
        search(x, y + 1, depth + 1)

    # 탐색 전으로 돌리기
    maze2[x][y] = 0

# 시작 위치에서 출발
search(1, 1, 0)


# ---- 우수법에 의한 깊이 우선 탐색 -----
dir = [[1, 0], [0, 1], [-1, 0], [0, -1]]  # (하, 우, 상, 좌)

# 시작 위치(x, y, 이동 횟수, 방향) 설정
x, y, depth, d = 1, 1, 0, 0


while maze3[x][y] != 1:
    # 탐색 완료로 설정
    maze3[x][y] = 2

    # 우수법으로 탐색
    for i in range(len(dir)):  # 이동 방향의 개수로 나눠 나머지를 구해서 다음 방향을 결정
        # 진행 방향의 오른쪽부터 순서대로 탐험
        j = (d + i - 1) % len(dir)
        print("i=", i, "d=", d, "d+i = ", d+i, "d+i-1=",d+i-1, "j=",j, "x=", x, "y=", y)

        if maze3[x + dir[j][0]][y + dir[j][1]] < 2:
            # 방문하지 않은 경우에는 진행하여 이동 횟수를 늘림
            x += dir[j][0]
            y += dir[j][1]
            d = j
            depth += 1
            break
        elif maze3[x + dir[j][0]][y + dir[j][1]] == 2:
            # 이미 방문한 경우에는 진행하여 이동 횟수를 줄임
            x += dir[j][0]
            y += dir[j][1]
            d = j
            depth -= 1
            break
print(depth)
